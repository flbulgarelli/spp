options {
   STATIC = false ;
}
PARSER_BEGIN(PredicateParser)
package pparser;
import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.List;
import java.math.BigDecimal;

/**
 * A predicate-like syntax predicates parse
 * @author flbulgarelli
 */
public class PredicateParser {
  private EventHandler handler;
  
  public void setEventHandler(EventHandler handler) {
    this.handler = handler;
  }

  public static void parse(String expression, EventHandler handler) {
    try {
      PredicateParser parser = new PredicateParser(new ByteArrayInputStream(expression.getBytes()));
      parser.setEventHandler(handler);
      parser.doParse();
    } catch (ParseException e) {
      throw new IllegalArgumentException("Syntax error in predicate expression " + expression + ". Cause: "
        + e.getMessage());
    }
  }
  
  public static void tryParse(String expression) {
    parse(expression, new NullEventHandler());
  }
  
  public static String parseString(String string) {
    return string.substring(1, string.length() - 1);
  }
}
PARSER_END(PredicateParser)


SKIP : { " " | "\n" | "\r" | "\t" }

TOKEN : { < COMMA : "," > }
TOKEN : { < SEMI_COLON : ";" > }

TOKEN : { < DOT : "." > }

TOKEN : { < OPEN_PAR : "(" > }
TOKEN : { < CLOSE_PAR : ")" > }
TOKEN : { < OPEN_BRACKET : "[" > }
TOKEN : { < CLOSE_BRACKET : "]" > }

TOKEN : { < IDENTIFIER : ["a"-"z","A"-"Z", "_"](["a"-"z","A"-"Z","0"-"9"])* > }

TOKEN : { < NUMBER :  (["0"-"9",".", "+", "-"])+ > }
TOKEN : { < STRING :  "\"" (~["\""])* "\"" > }

TOKEN : { < EQ : "=" >  }
TOKEN : { < GT : ">" >  }
TOKEN : { < LT : "<" >  }
TOKEN : { < GTE : ">=" >  }
TOKEN : { < LTE : "<=" >  }
TOKEN : { < NEQ : "<>" | "!=" | "/=" | "\\=" >  }

Operator operator() :
{ Operator operator; }
{
  (  < EQ > { operator = Operator.EQ; }
  | < GT > { operator = Operator.GT; }
  | < LT > { operator = Operator.LT; } 
  | < LTE > { operator = Operator.LTE; } 
  | < GTE > { operator = Operator.GTE; } 
  | < NEQ > { operator = Operator.NEQ; })
   { return operator; }
}

void doParse() : 
{ }
{ 
   predicateLevel1() 
}

void predicateLevel1() :
{ }
{
   predicateLevel2() ( < SEMI_COLON > predicateLevel2() { handler.orPredicate(); } )* 
}

void predicateLevel2() :
{}
{
   predicateLevel3() ( < COMMA > predicateLevel3() { handler.andPredicate(); } )*
}

void predicateLevel3() :
{}
{ 
  LOOKAHEAD(2)
  keywordPredicate()  | operatorPredicate() | < OPEN_PAR > predicateLevel1() < CLOSE_PAR > 
}

void keywordPredicate() :
{
  Token operation; 
  Object arg0, arg1 = null, arg2 = null;
}
{
  operation = < IDENTIFIER >
  < OPEN_PAR >
  arg0 = value()
  (< COMMA >
  arg1 = value()
  (< COMMA >
  arg2 = value())?)?
  < CLOSE_PAR > 
  { 
      handler.keywordPredicate(operation.image, arg0, arg1, arg2);
  }
}

void operatorPredicate() :
{
  Operator operator; 
  Object arg0, arg1;
}
{
  arg0 = value()
  (operator = operator() ) 
  arg1 = value()
  { 
      handler.operatorPredicate(operator, arg0, arg1);
  }
}

Path path() :
{ 
  PathBuilder pathBuilder = new PathBuilder();
  Token route = null; 
}
{
  route = < IDENTIFIER >
  {  pathBuilder.addRoute(route.image); }
  (< DOT >
  route = < IDENTIFIER > 
  { pathBuilder.addRoute(route.image); })*
  
  { return pathBuilder.build(); }
}


Object value() :
{ Object o = null; }
{
  (o = stringValue() |
   o = numericValue() |
   o = listValue() |
   o = path() )
  { return o; }   
}

String stringValue() :
{ Token v; }
{
  v =  <STRING>
  { return parseString(v.image); }
}

BigDecimal numericValue() :
{ Token v; }
{
  v =  <NUMBER>
  { return new BigDecimal(v.image); }
}


List<Object> listValue() :
{ List list = new ArrayList(); 
  Object element = null; 
}
{	
	<OPEN_BRACKET>
	(element = value()
	{ list.add(element); } 
	( < COMMA > element = value() 
	  { list.add(element); }
	)*)?	
	<CLOSE_BRACKET>
	{ return list; }
}

